// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  BLOCKED
}

model User {
  id           String     @id @default(uuid())
  name         String
  email        String     @unique
  password     String?
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  avatar       String?
  provider     String     @default("local")
  refreshToken String?    @map("refresh_token")
  status       UserStatus @default(ACTIVE)

  roles     String[]    @default(["USER"])
  testUser  TestUser[]
  Flashcard Flashcard[]

  @@map("users")
}

enum TestStatus {
  PUBLIC
  DRAFT
}

model Test {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  audio     String?

  parts     Part[]
  testUsers TestUser[]
  status    TestStatus @default(PUBLIC)
  questions Question[]

  @@map("tests")
}

model NationalTest {
  id        String     @id @default(uuid())
  name      String
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  status    TestStatus @default(PUBLIC)
  Questions Question[]

  @@map("national_tests")
}

model TestUser {
  id               String   @id @default(uuid())
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  totalScore       Int      @map("total_score")
  listeningScore   Int      @map("listening_score")
  readingScore     Int      @map("reading_socre")
  readingCorrect   Int      @map("reading_correct")
  listeningCorrect Int      @map("listening_correct")
  numAttempt       Int      @map("num_attempt")

  testId String @map("test_id")
  test   Test   @relation(references: [id], fields: [testId], onDelete: Cascade)

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  choices Choice[]

  @@map("test_users")
}

model Choice {
  id String @id @default(uuid())

  testUser   TestUser? @relation(fields: [testUserId], references: [id])
  testUserId String?   @map("test_user_id")

  answer   Answer? @relation(fields: [answerId], references: [id])
  answerId String?

  @@map("choices")
}

model Part {
  id        String     @id @default(uuid())
  name      String
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  test      Test       @relation(fields: [testId], references: [id], onDelete: Cascade)
  testId    String     @map("test_id")
  type      PartType
  questions Question[]

  @@map("parts")
}

model Question {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  part      Part?    @relation(fields: [partId], references: [id], onDelete: Cascade)
  partId    String?  @map("part_id")

  image      String @default("")
  audio      String @default("")
  text       String @default("")
  transcript String @default("")
  explain    String @default("")

  parentId       String?       @map("parent_id")
  parent         Question?     @relation("parents", fields: [parentId], references: [id])
  quesions       Question[]    @relation("parents")
  answers        Answer[]
  grammar        Grammar?      @relation(fields: [grammarId], references: [id])
  grammarId      String?       @map("grammar_id")
  nationalTest   NationalTest? @relation(fields: [nationalTestId], references: [id])
  nationalTestId String?       @map("national_test_id")
  testId         String?       @map("test_id")
  test           Test?         @relation(fields: [testId], references: [id])
  partType       PartType?     @map("part_type")

  @@map("questions")
}

model Answer {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String   @map("question_id")
  content    String
  isCorrect  Boolean  @default(false) @map("is_correct")
  choices    Choice[]

  @@map("answers")
}

model Grammar {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  theory    String

  questions Question[]

  @@index([name])
  @@map("grammars")
}

enum PartType {
  PART1
  PART2
  PART3
  PART4
  PART5
  PART6
  PART7
}

model Topic {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  parentId  String?  @map("parent_id")
  parent    Topic?   @relation("parents", fields: [parentId], references: [id], onDelete: Cascade)
  topics    Topic[]  @relation("parents")
  words     Word[]
  hasChild  Boolean  @default(false) @map("has_child")

  @@index([name])
  @@map("topics")
}

model Word {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  topicId       String?  @map("topic_id")
  topic         Topic?   @relation(fields: [topicId], references: [id], onDelete: Cascade)
  name          String
  definition    String?
  meaning       String?
  examples      String[]
  image         String?
  patchOfSpeech String?
  note          String?
  pronunciation String?

  audios    WordAudio[]
  flascards Flashcard[]

  @@index([name])
  @@map("words")
}

model WordAudio {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  wordId    String?  @map("word_id")
  word      Word?    @relation(fields: [wordId], references: [id], onDelete: Cascade)
  src       String
  region    String

  @@map("word_audios")
}

model Flashcard {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  userId    String?  @map("user_id")
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  wordId    String?  @map("word_id")
  word      Word?    @relation(fields: [wordId], references: [id], onDelete: Cascade)

  @@map("flashcards")
}
